# -*- coding: utf-8 -*-
"""Capstone

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NIyB-evXMdz97KaA4SeBRrsJ1Ssjp1j1
"""

import plotly.express as px
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import statsmodels.api as sm

"""# Motor Vehicle Collisions Data"""

mvc = pd.read_csv('/content/Motor_Vehicle_Collisions_-_Crashes (Filtered).csv')
mvc.head()

mvc.info()

mvc.describe()

for col in mvc:
  print(mvc[col].unique())

mvc['CONTRIBUTING FACTOR VEHICLE 1'].value_counts()

sns.countplot(x='YEAR',data=mvc)

sns.countplot(x='BOROUGH', hue = 'YEAR', data = mvc,
palette = 'Set1')

plt.figure(figsize=(15,8))
sns.countplot(x = 'CRASH DATE' , data = mvc,
hue = 'BOROUGH')

data = mvc.drop(['CRASH TIME', 'LATITUDE', 'LONGITUDE', 'ON STREET NAME', 'CROSS STREET NAME', 
            'OFF STREET NAME', 'LOCATION'], 
           axis=1, inplace=True)

data = mvc.drop(mvc.iloc[:, 20:30],axis = 1)

data.info()

data.describe()

data = data.dropna(subset=['BOROUGH'])

data['Month_Year'] = pd.to_datetime(data['CRASH DATE']).dt.to_period('M')

data.head()

#Count of crashes in a given month and year:
data['# of Crash (Y)'] = data.groupby('YEAR')['YEAR'].transform('count')
#Count of crashes in a given month and year:
data['# of Crash (M-Y)'] = data.groupby('Month_Year')['Month_Year'].transform('count')
data.head()

data.corr()

y = data['NUMBER OF PERSONS INJURED']
x = data['YEAR']
x = sm.add_constant(x)
model = sm.OLS(y, x).fit()
print(model.summary())

"""# Open Parking and Camera Violations Data"""

s_cam = pd.read_csv('/content/Open_Parking_and_Camera_Violations.csv')
s_cam

s_cam.info()

s_cam.describe()

s_cam['Month'] = pd.DatetimeIndex(s_cam['Issue Date']).month
s_cam['Year'] = pd.DatetimeIndex(s_cam['Issue Date']).year
s_cam['Month_Year'] = pd.to_datetime(s_cam['Issue Date']).dt.to_period('M')

sns.countplot(x='Month', hue = 'Year', data = s_cam,
palette = 'Set1')

sns.countplot(x='Year',data=s_cam)

s_cam.drop(['Plate', 'State', 'Summons Number', 'Violation Time', 'Violation', 
            'Judgment Entry Date', 'Penalty Amount', 'Interest Amount', 
            'Reduction Amount', 'Amount Due', 'Precinct', 'Issuing Agency', 
            'Violation Status', 'Summons Image', 'County'], 
           axis=1, inplace=True)

s_cam.sort_values(by='Month_Year')

#Count of tickets in a given month:
s_cam['MCount'] = s_cam.groupby('Month')['Month'].transform('count')
#Count of tickets in a given year:
s_cam['YCount'] = s_cam.groupby('Year')['Year'].transform('count')
#Count of tickets in a given month and year:
s_cam['M_YCount'] = s_cam.groupby('Month_Year')['Month_Year'].transform('count')

#Total fine for given month:
s_cam['FSum_M'] = s_cam.groupby('MCount')['Fine Amount'].transform('sum')
#Total fine for given year:
s_cam['FSum_Y'] = s_cam.groupby('YCount')['Fine Amount'].transform('sum')
#Total fine for given month and year:
s_cam['FSum_MY'] = s_cam.groupby('M_YCount')['Fine Amount'].transform('sum')

s_cam

df = s_cam.drop_duplicates(subset='Month_Year', keep="first")

df = df.sort_values(by='Month_Year')
df

df['Series'] = np.arange(1,len(df)+1)
first_column = df.pop('Series')
df.insert(0, 'Series', first_column)
df.head()

g1 = sns.lineplot(data=df, x="Month", y="M_YCount", hue = "Year")

y = df['FSum_MY']
x = df['Series']
x = sm.add_constant(x)
model = sm.OLS(y, x).fit()
print(model.summary())

"""# Bicycle Crash Data"""

b_b = pd.read_excel('/content/Bicycle Crash Data (2019-2021).xlsx', sheet_name='B-B')
b_b

b_p = pd.read_excel('/content/Bicycle Crash Data (2019-2021).xlsx', sheet_name='B-P')
b_p

b_mv = pd.read_excel('/content/Bicycle Crash Data (2019-2021).xlsx', sheet_name='B-MV')
b_mv

b_b = b_b.iloc[:, :-2]
b_p = b_p.iloc[:, :-2]
b_mv = b_mv.iloc[:, :-2]

b_b = b_b[b_b["Borough"].str.contains("Total") == False]
b_b.info()

b_b.describe()

sns.lineplot(data=b_b, x="Borough", y="Crashes", hue = "Year")

sns.barplot(data=b_b, x="Year", y="Crashes", hue = "Borough")

sns.boxplot(data=b_b, x="Year", y="Bicyclist Injuries", hue = "Borough")

y = b_b['Crashes']
x = b_b['Year']

x = sm.add_constant(x)
model = sm.OLS(y, x).fit()

print(model.summary())

b_p = b_p[b_p["Borough"].str.contains("Total") == False]
b_p.info()

b_p.describe()

sns.lineplot(data=b_p, x="Borough", y="Crashes", hue = "Year")

sns.barplot(data=b_p, x="Year", y="Crashes", hue = "Borough")

sns.boxplot(data=b_p, x="Year", y="Bicyclist Injuries", hue = "Borough")

y1 = b_p['Crashes']
x1 = b_p['Year']

x1 = sm.add_constant(x1)
model1 = sm.OLS(y1, x1).fit()

print(model1.summary())

b_mv = b_mv[b_mv["Borough"].str.contains("Total") == False]
b_mv.info()

b_mv.describe()

sns.lineplot(data=b_mv, x="Borough", y="Crashes", hue = "Year")

sns.barplot(data=b_mv, x="Year", y="Crashes", hue = "Borough")

sns.boxplot(data=b_mv, x="Year", y="Bicyclist Injuries", hue = "Borough")

y2 = b_mv['Crashes']
x2 = b_mv['Year']

x2 = sm.add_constant(x2)
model2 = sm.OLS(y2, x2).fit()

print(model2.summary())

"""# Mistakes"""

import plotly.express as px
fig = px.line(b_b, x="Year", y="Crashes", template = 'plotly_dark')
fig.show()

#!pip install pycaret
from pycaret.regression import *

s = setup(data = train, test_data = test, target = 'M_YCount', fold_strategy = 'timeseries', numeric_features = ['Series'], fold = 3, transform_target = True, session_id = 123)

dft = data.drop_duplicates(subset='Month_Year', keep="first")
dft = dft.sort_values(by='Month_Year')
dft